name: Run automated unit tests and build new-feature
on:
  push:
    branches:
      - '**'
      - '!main'

env:
  TEST_NOT_OK: NOT_OK

jobs:
  unittests:
    runs-on: ubuntu-latest    
    env:
      TEST_ERR_CONDITION: FAILED
      TEST_OK: OK

      TEST_DOCKER_TAG: test-${GITHUB_REPOSITORY_ID}-${GITHUB_REF_NAME}-$GITHUB_RUN_ID
      TEST_LOG: test-${GITHUB_RUN_ID}-result.log
      TEST_DOCKERFILE: ./run/Dockerfile-tests

    outputs:
      test-result: ${{ steps.test-report.outputs.result }}

    steps:
    - name: Checkout branch code
      uses: actions/checkout@v3

    - name: Build the tests Docker image
      run: docker build . --file  ${{ env.TEST_DOCKERFILE }}  --tag ${{ env.TEST_DOCKER_TAG }}

    - name: Run unit tests
      run: docker run  ${{ env.TEST_DOCKER_TAG }} 2>&1 | tee ${{ env.TEST_LOG }}

    - id: test-report
      name: Generate test result outputs
      run: |
            found_errors=$(grep -o ${{ env.TEST_ERR_CONDITION }} ${{ env.TEST_LOG }} | head -n 1)
            if [ -z $found_errors ]; then result=${{ env.TEST_OK }};else result=${{ env.TEST_NOT_OK }};fi
            echo "result=${result}"
            echo "result=${result}" >> $GITHUB_OUTPUT


  feature_build_and_push:
    runs-on: ubuntu-latest
    needs: unittests
    outputs:
      build-docker-tag: ${{ steps.tag-push.outputs.result }}
    env:
      TEST_ERR_MSG: "Unittests failed. Build job cannot continue"
      TEST_OK_MSG: "Unittests OK. Proceeding to build job"

      BUILD_DOCKERFILE: ./run/Dockerfile
      BUILD_DOCKER_TAG: build-${GITHUB_REPOSITORY_ID}-${GITHUB_REF_NAME}-$GITHUB_RUN_ID
      BUILD_LOG: build-${GITHUB_RUN_ID}-result.log
    steps:
      - name: Inspect tests result
        run: |
            echo "Tests result: ${{needs.unittests.outputs.test-result}}"

      - name: Check tests result
        # Do not use ${{ }} with if conditions
        # Reference: https://docs.github.com/en/actions/using-jobs/using-conditions-to-control-job-execution
        if: needs.unittests.outputs.test-result==env.TEST_NOT_OK
        run: |
            exit 1

      - uses: actions/checkout@v3

      - name: Build
        if: success()
        run:  | 
              echo ${{ env.TEST_OK_MSG }}
              docker build . --file  ${{ env.BUILD_DOCKERFILE }}  --tag ${{ env.BUILD_DOCKER_TAG }}

      - name: Log in to Docker Hub
        if: success()
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag and push
        id: tag-push
        if: success()
        run: |
          export REMOTE_TAG="${{ vars.DOCKERHUB_REPO }}:${{ env.BUILD_DOCKER_TAG }}"
          docker tag ${{ env.BUILD_DOCKER_TAG }} ${REMOTE_TAG}
          docker push ${REMOTE_TAG}
          result=${{ env.BUILD_DOCKER_TAG }}
          echo "result=${result}"
          echo "result=${result}" >> $GITHUB_OUTPUT

  run_ci_as_svc_test:
    runs-on: ubuntu-latest
    needs: feature_build_and_push
    container: alpine
    services:
      my_app:
        image: ${{vars.DOCKERHUB_REPO}}:${{needs.feature_build_and_push.outputs.build-docker-tag}}
        credentials:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
        env:
          PORT: 5000
        ports:
          - 5000:5000
    steps:
      - name: test_app_endpoint
        if: success()
        run: |
          wget -S -q -O /dev/null my_app:5000
          

  deploy_to_AZ:    
    runs-on: ubuntu-latest
    needs: [ feature_build_and_push, run_ci_as_svc_test ]
    environment: Azure Dev
    env:
      # AZ resources
      RESOURCEGROUPNAME: ${{ vars.AZ_RG }}
      SUBSCRIPTIONID: ${{ secrets.AZ_SUBS }}

      # Container instances
      LOCATION: ${{ vars.AZ_LOCATION }}
      CR_NAME: "cr-101"
      CR_IMAGE: "${{vars.DOCKERHUB_REPO}}:${{needs.feature_build_and_push.outputs.build-docker-tag}}"
      CR_IMAGE_TYPE: "Private"
      REGISTRY: "index.docker.io"
      CR_TARGET_PORT: "80"

      # Other parameters set in run/envs/dev/az/cr_parameters.json:
      # "imageType": { "value": "Private"},
      # "osType": { "value": "Linux" },
      # "availabilityZones": {"value": [ ]},
      # "numberCpuCores": { "value": "1" },"memory": {"value": "1.5"},
      # "restartPolicy": { "value": "OnFailure"},
      # "sku": {"value": "Standard" }
      # "ipAddressType": { "value": "Public" }
      # "ports": { "value": [{"port": "80","protocol": "TCP"}


    steps:
    - uses: actions/checkout@v2

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZ_CREDENTIALS }}

    - name: Create Container instance
      uses: azure/arm-deploy@main
      id: deploy
      with:
        scope: resourcegroup
        subscriptionId: ${{ env.SUBSCRIPTIONID }}
        resourceGroupName: ${{ env.RESOURCEGROUPNAME }}
        template: run/envs/dev/az/cr_template.json
        parameters: run/envs/dev/az/cr_parameters.json location="${{ env.LOCATION }}" containerName="${{ env.CR_NAME }}"  imageRegistryLoginServer="${{ env.REGISTRY }}"  imageName="${{ env.CR_IMAGE }}" imageUsername="${{ secrets.DOCKERHUB_USER }}" imagePassword="${{ secrets.DOCKERHUB_PASSWORD }}" environmentVariable_flask_key="${{ secrets.CR_FLASK_KEY }}" environmentVariable_cr_target_port="${{ env.CR_TARGET_PORT }}"
        # additionalArguments: "--what-if --rollback-on-error --what-if-exclude-change-types Create Ignore"
    - name: Display Container Instance Info
      run: echo ${{ steps.deploy.outputs.containerIPv4Address }}


